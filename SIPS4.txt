//4bitCPU
SIPS4(Simple Instruction set Processor for Study 4bit)

目標
実装しやすいシンプルな設計のISA
互換性は重視しない、趣味用
ある程度の実用性を持たせる


命令長16bit固定
ハーバードアーキテクチャ(ノイマン型も可能)

レジスタ
8GPRs
IP
FLAGS

op(5),src1(3),src2/imm(4),dst(3),src2_mode(1)


ALU:op上位が0の時に下位(とりあえず4bit)で指定
add,sub,and,or,xor,shift(x3),
//cmov,mul,div,set/get flag?
movはadd0とnot/neg immがあればいらない
nopもadd0があれば不要,
逆subがあればneg不要(結局用意しなかった)
notもxor immで十分
この場合はmovほしい
条件レジスタ作ってcmov実装か0レジスタで回避できる


JMP
jcc(x2)
jal(jump and link)
分岐予測するなら無条件分岐は別のほうがいいかもしれないけど、この規模では分岐するかどうかぐらいしか実装する意味がなさそう
条件レジスタ使ってcmov実装するなら条件はopの一部とsrc1
条件レジスタだけならdst併用でもいいかな
実装が面倒だしあんまり意味もないので絶対アドレス指定のみ
即値、オフセットはアドレスがが命令長の倍数になるように定数倍してアクセス


MEM
mov(load([src2]->dst),store([src2]<-src1))

IO
in/out(LEDやスイッチ,GPIOなど)
形式はMEMと同じ(追加機能はなし)
GPIOを実装する予定はない(?)

CTRL
HLT/CPUID(optional)
この辺りはIOに統合。MEMと違ってsrc1またはdstの使ってないほうを1にする(今回はいらない?)


//subとかstoreはsrcが逆もあったほうがいい気はするけど
オーバーフローは無視
src2がimmと切り替えられるので優先的に使う
src1とsrc2は名前が逆のほうが使いやすい?
未使用部分は0で埋めないと未定義(拡張用に予約)
必要ならsign-extend(たぶんいらないはず)
フラグは全部書き換え(パーシャルレジスターアクセスはない)

cc
eq/neq
of/nof
g/ge/l/le(signed)
a/ae/b(c)/be(unsigned)
s/ns
always
全部実装するなら２命令分使うか
eq/neq/s/nsだけなら直接レジスタ見れば行ける(ただしほかの条件でも使うのでレジスタへの実装はいるし、わかりにくい)
